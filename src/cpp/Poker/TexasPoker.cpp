//----------------------------------------------------------------------------
//
//       Copyright (C) 2017 Frank Eskesen.
//
//       This file is free content, distributed under the GNU General
//       Public License, version 3.0.
//       (See accompanying file LICENSE.GPL-3.0 or the original
//       contained within https://www.gnu.org/licenses/gpl-3.0.en.html)
//
//----------------------------------------------------------------------------
//
// Title-
//       TexasPoker.cpp
//
// Purpose-
//       Texas hold'em implementations.
//
// Last change date-
//       2017/01/01
//
//----------------------------------------------------------------------------
#include "Card.h"
#include "Hand.h"
#include "Player.h"
#include "Rating.h"
#include "Strategy.h"
#include "Table.h"
#include "Utility.h"

#include "TexasPoker.h"

//----------------------------------------------------------------------------
// Constants for parameterization
//----------------------------------------------------------------------------
#ifndef HCDM
#undef  HCDM                        // If defined, Hard Core Debug Mode
#endif

#define DIM_DEALTABLE (sizeof(dealTable)/sizeof(dealTable[0]))
#define ITERATIONS 100000           // Number of Monte Carlo iterations
#define PLAYERS 7                   // Number of Players for evaluation

//----------------------------------------------------------------------------
// Internal data areas
//----------------------------------------------------------------------------
static Deck            deck;        // A working deck

//----------------------------------------------------------------------------
//
// Struct-
//       Evaluation
//
// Purpose-
//       Rating evaluation.
//
//----------------------------------------------------------------------------
struct Evaluation                   // Rating evaulation
{
   double              rateWins;    // Win rating
   double              rateTies;    // Tie rating
}; // struct Evaluation

//----------------------------------------------------------------------------
//
// Struct-
//       DealTable
//
// Purpose-
//       Rating table for deal.
//
//----------------------------------------------------------------------------
struct DealTable                    // Rating table: Aces always HI
{
   Card::Rank          downHi;      // Higher Rank
   Card::Rank          downLo;      // Lower Rank
   int                 suited;      // TRUE iff suited
   Evaluation          evaluation[PLAYERS]; // Evaluation table
}; // struct DealTable

static const DealTable dealTable[]=  //          1,                2,                3,                4,                5,                6                 7
{  {Card::RANK_A, Card::RANK_A, FALSE, {{0.0, 1.0}, {0.8455, 0.0051}, {0.7306, 0.0056}, {0.6337, 0.0060}, {0.5538, 0.0057}, {0.4872, 0.0055}, {0.4312, 0.0054}}}
,  {Card::RANK_K, Card::RANK_K, FALSE, {{0.0, 1.0}, {0.8194, 0.0058}, {0.6838, 0.0062}, {0.5757, 0.0061}, {0.4938, 0.0062}, {0.4270, 0.0061}, {0.3723, 0.0061}}}
,  {Card::RANK_Q, Card::RANK_Q, FALSE, {{0.0, 1.0}, {0.7961, 0.0056}, {0.6433, 0.0061}, {0.5285, 0.0066}, {0.4395, 0.0070}, {0.3723, 0.0073}, {0.3189, 0.0076}}}
,  {Card::RANK_J, Card::RANK_J, FALSE, {{0.0, 1.0}, {0.7701, 0.0065}, {0.6058, 0.0075}, {0.4854, 0.0082}, {0.3962, 0.0083}, {0.3307, 0.0086}, {0.2800, 0.0091}}}
,  {Card::RANK_T, Card::RANK_T, FALSE, {{0.0, 1.0}, {0.7465, 0.0073}, {0.5721, 0.0086}, {0.4472, 0.0087}, {0.3596, 0.0088}, {0.2952, 0.0094}, {0.2477, 0.0100}}}
,  {Card::RANK_9, Card::RANK_9, FALSE, {{0.0, 1.0}, {0.7161, 0.0073}, {0.5362, 0.0076}, {0.4097, 0.0078}, {0.3248, 0.0078}, {0.2649, 0.0076}, {0.2220, 0.0075}}}
,  {Card::RANK_8, Card::RANK_8, FALSE, {{0.0, 1.0}, {0.6855, 0.0087}, {0.4956, 0.0082}, {0.3702, 0.0084}, {0.2869, 0.0081}, {0.2344, 0.0080}, {0.1966, 0.0082}}}
,  {Card::RANK_7, Card::RANK_7, FALSE, {{0.0, 1.0}, {0.6579, 0.0104}, {0.4632, 0.0092}, {0.3422, 0.0084}, {0.2650, 0.0080}, {0.2161, 0.0078}, {0.1841, 0.0078}}}
,  {Card::RANK_6, Card::RANK_6, FALSE, {{0.0, 1.0}, {0.6292, 0.0119}, {0.4295, 0.0102}, {0.3106, 0.0095}, {0.2413, 0.0091}, {0.1989, 0.0090}, {0.1704, 0.0087}}}
,  {Card::RANK_5, Card::RANK_5, FALSE, {{0.0, 1.0}, {0.5963, 0.0141}, {0.3957, 0.0114}, {0.2844, 0.0103}, {0.2201, 0.0097}, {0.1813, 0.0093}, {0.1577, 0.0091}}}
,  {Card::RANK_4, Card::RANK_4, FALSE, {{0.0, 1.0}, {0.5644, 0.0154}, {0.3671, 0.0106}, {0.2630, 0.0088}, {0.2071, 0.0080}, {0.1748, 0.0075}, {0.1536, 0.0070}}}
,  {Card::RANK_3, Card::RANK_3, FALSE, {{0.0, 1.0}, {0.5238, 0.0172}, {0.3305, 0.0110}, {0.2353, 0.0083}, {0.1863, 0.0068}, {0.1609, 0.0061}, {0.1440, 0.0059}}}
,  {Card::RANK_2, Card::RANK_2, FALSE, {{0.0, 1.0}, {0.4936, 0.0184}, {0.3000, 0.0115}, {0.2160, 0.0087}, {0.1759, 0.0069}, {0.1534, 0.0055}, {0.1402, 0.0049}}}
,  {Card::RANK_A, Card::RANK_K,  TRUE, {{0.0, 1.0}, {0.6615, 0.0162}, {0.4995, 0.0190}, {0.4067, 0.0201}, {0.3464, 0.0201}, {0.3031, 0.0201}, {0.2698, 0.0197}}}
,  {Card::RANK_A, Card::RANK_Q,  TRUE, {{0.0, 1.0}, {0.6503, 0.0200}, {0.4819, 0.0226}, {0.3856, 0.0237}, {0.3251, 0.0249}, {0.2810, 0.0239}, {0.2467, 0.0234}}}
,  {Card::RANK_A, Card::RANK_J,  TRUE, {{0.0, 1.0}, {0.6383, 0.0208}, {0.4655, 0.0247}, {0.3683, 0.0258}, {0.3067, 0.0248}, {0.2646, 0.0240}, {0.2327, 0.0229}}}
,  {Card::RANK_A, Card::RANK_T,  TRUE, {{0.0, 1.0}, {0.6407, 0.0215}, {0.4631, 0.0280}, {0.3642, 0.0285}, {0.2993, 0.0292}, {0.2550, 0.0292}, {0.2210, 0.0295}}}
,  {Card::RANK_A, Card::RANK_9,  TRUE, {{0.0, 1.0}, {0.6183, 0.0247}, {0.4329, 0.0308}, {0.3310, 0.0320}, {0.2685, 0.0316}, {0.2268, 0.0302}, {0.1968, 0.0290}}}
,  {Card::RANK_A, Card::RANK_8,  TRUE, {{0.0, 1.0}, {0.6035, 0.0296}, {0.4156, 0.0355}, {0.3185, 0.0357}, {0.2578, 0.0331}, {0.2169, 0.0315}, {0.1881, 0.0304}}}
,  {Card::RANK_A, Card::RANK_7,  TRUE, {{0.0, 1.0}, {0.5912, 0.0319}, {0.4031, 0.0379}, {0.3090, 0.0374}, {0.2492, 0.0361}, {0.2102, 0.0342}, {0.1828, 0.0337}}}
,  {Card::RANK_A, Card::RANK_6,  TRUE, {{0.0, 1.0}, {0.5837, 0.0323}, {0.3939, 0.0380}, {0.2953, 0.0370}, {0.2381, 0.0344}, {0.2010, 0.0339}, {0.1750, 0.0333}}}
,  {Card::RANK_A, Card::RANK_5,  TRUE, {{0.0, 1.0}, {0.5819, 0.0354}, {0.3945, 0.0397}, {0.2960, 0.0404}, {0.2405, 0.0392}, {0.2035, 0.0372}, {0.1775, 0.0366}}}
,  {Card::RANK_A, Card::RANK_4,  TRUE, {{0.0, 1.0}, {0.5753, 0.0364}, {0.3893, 0.0417}, {0.2928, 0.0409}, {0.2374, 0.0395}, {0.2006, 0.0383}, {0.1750, 0.0367}}}
,  {Card::RANK_A, Card::RANK_3,  TRUE, {{0.0, 1.0}, {0.5606, 0.0395}, {0.3746, 0.0410}, {0.2832, 0.0384}, {0.2311, 0.0369}, {0.1953, 0.0354}, {0.1703, 0.0329}}}
,  {Card::RANK_A, Card::RANK_2,  TRUE, {{0.0, 1.0}, {0.5570, 0.0368}, {0.3728, 0.0395}, {0.2806, 0.0380}, {0.2280, 0.0358}, {0.1934, 0.0335}, {0.1683, 0.0321}}}
,  {Card::RANK_K, Card::RANK_Q,  TRUE, {{0.0, 1.0}, {0.6226, 0.0211}, {0.4576, 0.0210}, {0.3694, 0.0204}, {0.3110, 0.0207}, {0.2709, 0.0203}, {0.2385, 0.0196}}}
,  {Card::RANK_K, Card::RANK_J,  TRUE, {{0.0, 1.0}, {0.6118, 0.0209}, {0.4452, 0.0239}, {0.3533, 0.0250}, {0.2952, 0.0241}, {0.2553, 0.0249}, {0.2236, 0.0246}}}
,  {Card::RANK_K, Card::RANK_T,  TRUE, {{0.0, 1.0}, {0.6088, 0.0240}, {0.4361, 0.0274}, {0.3449, 0.0276}, {0.2884, 0.0279}, {0.2480, 0.0283}, {0.2179, 0.0281}}}
,  {Card::RANK_K, Card::RANK_9,  TRUE, {{0.0, 1.0}, {0.5878, 0.0277}, {0.4085, 0.0298}, {0.3144, 0.0283}, {0.2591, 0.0276}, {0.2207, 0.0273}, {0.1937, 0.0266}}}
,  {Card::RANK_K, Card::RANK_8,  TRUE, {{0.0, 1.0}, {0.5672, 0.0312}, {0.3858, 0.0334}, {0.2934, 0.0319}, {0.2367, 0.0320}, {0.1987, 0.0306}, {0.1708, 0.0293}}}
,  {Card::RANK_K, Card::RANK_7,  TRUE, {{0.0, 1.0}, {0.5596, 0.0336}, {0.3750, 0.0367}, {0.2843, 0.0358}, {0.2283, 0.0341}, {0.1916, 0.0322}, {0.1665, 0.0306}}}
,  {Card::RANK_K, Card::RANK_6,  TRUE, {{0.0, 1.0}, {0.5488, 0.0357}, {0.3659, 0.0375}, {0.2730, 0.0352}, {0.2210, 0.0327}, {0.1853, 0.0329}, {0.1598, 0.0318}}}
,  {Card::RANK_K, Card::RANK_5,  TRUE, {{0.0, 1.0}, {0.5405, 0.0399}, {0.3574, 0.0408}, {0.2673, 0.0381}, {0.2130, 0.0360}, {0.1790, 0.0349}, {0.1559, 0.0341}}}
,  {Card::RANK_K, Card::RANK_4,  TRUE, {{0.0, 1.0}, {0.5260, 0.0387}, {0.3476, 0.0384}, {0.2579, 0.0362}, {0.2074, 0.0320}, {0.1768, 0.0298}, {0.1522, 0.0298}}}
,  {Card::RANK_K, Card::RANK_3,  TRUE, {{0.0, 1.0}, {0.5238, 0.0371}, {0.3413, 0.0383}, {0.2542, 0.0333}, {0.2035, 0.0313}, {0.1729, 0.0296}, {0.1492, 0.0290}}}
,  {Card::RANK_K, Card::RANK_2,  TRUE, {{0.0, 1.0}, {0.5123, 0.0412}, {0.3319, 0.0396}, {0.2490, 0.0334}, {0.2042, 0.0302}, {0.1729, 0.0294}, {0.1521, 0.0267}}}
,  {Card::RANK_Q, Card::RANK_J,  TRUE, {{0.0, 1.0}, {0.5897, 0.0239}, {0.4307, 0.0262}, {0.3469, 0.0257}, {0.2936, 0.0241}, {0.2541, 0.0234}, {0.2233, 0.0238}}}
,  {Card::RANK_Q, Card::RANK_T,  TRUE, {{0.0, 1.0}, {0.5822, 0.0262}, {0.4165, 0.0282}, {0.3313, 0.0271}, {0.2788, 0.0258}, {0.2415, 0.0257}, {0.2117, 0.0258}}}
,  {Card::RANK_Q, Card::RANK_9,  TRUE, {{0.0, 1.0}, {0.5600, 0.0278}, {0.3926, 0.0281}, {0.3053, 0.0266}, {0.2516, 0.0259}, {0.2136, 0.0255}, {0.1858, 0.0256}}}
,  {Card::RANK_Q, Card::RANK_8,  TRUE, {{0.0, 1.0}, {0.5475, 0.0309}, {0.3714, 0.0312}, {0.2835, 0.0306}, {0.2318, 0.0288}, {0.1953, 0.0287}, {0.1686, 0.0273}}}
,  {Card::RANK_Q, Card::RANK_7,  TRUE, {{0.0, 1.0}, {0.5245, 0.0364}, {0.3490, 0.0356}, {0.2637, 0.0329}, {0.2124, 0.0306}, {0.1763, 0.0289}, {0.1516, 0.0287}}}
,  {Card::RANK_Q, Card::RANK_6,  TRUE, {{0.0, 1.0}, {0.5127, 0.0386}, {0.3344, 0.0361}, {0.2499, 0.0328}, {0.2017, 0.0297}, {0.1673, 0.0294}, {0.1431, 0.0289}}}
,  {Card::RANK_Q, Card::RANK_5,  TRUE, {{0.0, 1.0}, {0.5091, 0.0410}, {0.3312, 0.0399}, {0.2476, 0.0365}, {0.1992, 0.0340}, {0.1675, 0.0315}, {0.1433, 0.0311}}}
,  {Card::RANK_Q, Card::RANK_4,  TRUE, {{0.0, 1.0}, {0.5005, 0.0421}, {0.3244, 0.0396}, {0.2415, 0.0333}, {0.1936, 0.0298}, {0.1628, 0.0278}, {0.1420, 0.0274}}}
,  {Card::RANK_Q, Card::RANK_3,  TRUE, {{0.0, 1.0}, {0.4899, 0.0415}, {0.3167, 0.0389}, {0.2359, 0.0347}, {0.1920, 0.0312}, {0.1613, 0.0292}, {0.1411, 0.0278}}}
,  {Card::RANK_Q, Card::RANK_2,  TRUE, {{0.0, 1.0}, {0.4802, 0.0435}, {0.3083, 0.0377}, {0.2282, 0.0336}, {0.1837, 0.0298}, {0.1551, 0.0279}, {0.1344, 0.0260}}}
,  {Card::RANK_J, Card::RANK_T,  TRUE, {{0.0, 1.0}, {0.5611, 0.0279}, {0.4071, 0.0282}, {0.3283, 0.0275}, {0.2754, 0.0287}, {0.2373, 0.0285}, {0.2071, 0.0285}}}
,  {Card::RANK_J, Card::RANK_9,  TRUE, {{0.0, 1.0}, {0.5431, 0.0309}, {0.3821, 0.0302}, {0.2982, 0.0280}, {0.2476, 0.0266}, {0.2113, 0.0264}, {0.1846, 0.0257}}}
,  {Card::RANK_J, Card::RANK_8,  TRUE, {{0.0, 1.0}, {0.5244, 0.0351}, {0.3615, 0.0328}, {0.2784, 0.0299}, {0.2293, 0.0281}, {0.1931, 0.0270}, {0.1669, 0.0262}}}
,  {Card::RANK_J, Card::RANK_7,  TRUE, {{0.0, 1.0}, {0.4991, 0.0378}, {0.3316, 0.0353}, {0.2513, 0.0313}, {0.2037, 0.0294}, {0.1712, 0.0283}, {0.1469, 0.0276}}}
,  {Card::RANK_J, Card::RANK_6,  TRUE, {{0.0, 1.0}, {0.4918, 0.0404}, {0.3229, 0.0358}, {0.2419, 0.0329}, {0.1972, 0.0301}, {0.1640, 0.0296}, {0.1414, 0.0292}}}
,  {Card::RANK_J, Card::RANK_5,  TRUE, {{0.0, 1.0}, {0.4758, 0.0433}, {0.3107, 0.0397}, {0.2313, 0.0344}, {0.1851, 0.0313}, {0.1558, 0.0308}, {0.1341, 0.0300}}}
,  {Card::RANK_J, Card::RANK_4,  TRUE, {{0.0, 1.0}, {0.4731, 0.0453}, {0.3066, 0.0380}, {0.2282, 0.0342}, {0.1828, 0.0310}, {0.1541, 0.0293}, {0.1325, 0.0282}}}
,  {Card::RANK_J, Card::RANK_3,  TRUE, {{0.0, 1.0}, {0.4572, 0.0426}, {0.2909, 0.0382}, {0.2169, 0.0324}, {0.1742, 0.0304}, {0.1459, 0.0278}, {0.1266, 0.0263}}}
,  {Card::RANK_J, Card::RANK_2,  TRUE, {{0.0, 1.0}, {0.4471, 0.0437}, {0.2839, 0.0363}, {0.2111, 0.0316}, {0.1717, 0.0278}, {0.1459, 0.0255}, {0.1272, 0.0240}}}
,  {Card::RANK_T, Card::RANK_9,  TRUE, {{0.0, 1.0}, {0.5202, 0.0340}, {0.3734, 0.0306}, {0.2954, 0.0294}, {0.2451, 0.0270}, {0.2103, 0.0270}, {0.1841, 0.0266}}}
,  {Card::RANK_T, Card::RANK_8,  TRUE, {{0.0, 1.0}, {0.5037, 0.0359}, {0.3502, 0.0325}, {0.2722, 0.0308}, {0.2254, 0.0300}, {0.1927, 0.0293}, {0.1677, 0.0284}}}
,  {Card::RANK_T, Card::RANK_7,  TRUE, {{0.0, 1.0}, {0.4887, 0.0385}, {0.3318, 0.0347}, {0.2571, 0.0334}, {0.2096, 0.0314}, {0.1786, 0.0307}, {0.1551, 0.0304}}}
,  {Card::RANK_T, Card::RANK_6,  TRUE, {{0.0, 1.0}, {0.4635, 0.0441}, {0.3080, 0.0377}, {0.2337, 0.0337}, {0.1897, 0.0315}, {0.1593, 0.0302}, {0.1367, 0.0293}}}
,  {Card::RANK_T, Card::RANK_5,  TRUE, {{0.0, 1.0}, {0.4454, 0.0447}, {0.2884, 0.0366}, {0.2155, 0.0332}, {0.1727, 0.0303}, {0.1452, 0.0295}, {0.1261, 0.0288}}}
,  {Card::RANK_T, Card::RANK_4,  TRUE, {{0.0, 1.0}, {0.4448, 0.0474}, {0.2883, 0.0384}, {0.2164, 0.0331}, {0.1734, 0.0311}, {0.1465, 0.0298}, {0.1274, 0.0289}}}
,  {Card::RANK_T, Card::RANK_3,  TRUE, {{0.0, 1.0}, {0.4366, 0.0461}, {0.2812, 0.0342}, {0.2100, 0.0297}, {0.1682, 0.0278}, {0.1414, 0.0263}, {0.1226, 0.0259}}}
,  {Card::RANK_T, Card::RANK_2,  TRUE, {{0.0, 1.0}, {0.4267, 0.0454}, {0.2700, 0.0362}, {0.2012, 0.0301}, {0.1637, 0.0268}, {0.1375, 0.0259}, {0.1205, 0.0243}}}
,  {Card::RANK_9, Card::RANK_8,  TRUE, {{0.0, 1.0}, {0.4897, 0.0389}, {0.3470, 0.0329}, {0.2745, 0.0296}, {0.2265, 0.0282}, {0.1937, 0.0271}, {0.1689, 0.0259}}}
,  {Card::RANK_9, Card::RANK_7,  TRUE, {{0.0, 1.0}, {0.4678, 0.0417}, {0.3224, 0.0342}, {0.2522, 0.0292}, {0.2072, 0.0271}, {0.1761, 0.0257}, {0.1545, 0.0250}}}
,  {Card::RANK_9, Card::RANK_6,  TRUE, {{0.0, 1.0}, {0.4513, 0.0451}, {0.3074, 0.0348}, {0.2333, 0.0318}, {0.1891, 0.0286}, {0.1598, 0.0265}, {0.1388, 0.0248}}}
,  {Card::RANK_9, Card::RANK_5,  TRUE, {{0.0, 1.0}, {0.4336, 0.0484}, {0.2855, 0.0371}, {0.2146, 0.0304}, {0.1726, 0.0283}, {0.1462, 0.0273}, {0.1271, 0.0263}}}
,  {Card::RANK_9, Card::RANK_4,  TRUE, {{0.0, 1.0}, {0.4189, 0.0483}, {0.2699, 0.0357}, {0.2010, 0.0304}, {0.1611, 0.0275}, {0.1346, 0.0257}, {0.1167, 0.0242}}}
,  {Card::RANK_9, Card::RANK_3,  TRUE, {{0.0, 1.0}, {0.4119, 0.0494}, {0.2632, 0.0361}, {0.1970, 0.0301}, {0.1583, 0.0279}, {0.1332, 0.0260}, {0.1158, 0.0245}}}
,  {Card::RANK_9, Card::RANK_2,  TRUE, {{0.0, 1.0}, {0.4021, 0.0466}, {0.2576, 0.0332}, {0.1930, 0.0277}, {0.1556, 0.0244}, {0.1318, 0.0215}, {0.1147, 0.0207}}}
,  {Card::RANK_8, Card::RANK_7,  TRUE, {{0.0, 1.0}, {0.4531, 0.0469}, {0.3211, 0.0349}, {0.2516, 0.0307}, {0.2082, 0.0273}, {0.1793, 0.0255}, {0.1566, 0.0244}}}
,  {Card::RANK_8, Card::RANK_6,  TRUE, {{0.0, 1.0}, {0.4381, 0.0497}, {0.3037, 0.0337}, {0.2332, 0.0287}, {0.1906, 0.0270}, {0.1626, 0.0254}, {0.1413, 0.0247}}}
,  {Card::RANK_8, Card::RANK_5,  TRUE, {{0.0, 1.0}, {0.4216, 0.0502}, {0.2855, 0.0356}, {0.2162, 0.0311}, {0.1780, 0.0277}, {0.1507, 0.0265}, {0.1317, 0.0251}}}
,  {Card::RANK_8, Card::RANK_4,  TRUE, {{0.0, 1.0}, {0.3997, 0.0529}, {0.2639, 0.0360}, {0.2004, 0.0293}, {0.1626, 0.0264}, {0.1380, 0.0241}, {0.1212, 0.0221}}}
,  {Card::RANK_8, Card::RANK_3,  TRUE, {{0.0, 1.0}, {0.3874, 0.0523}, {0.2510, 0.0351}, {0.1867, 0.0285}, {0.1493, 0.0251}, {0.1264, 0.0231}, {0.1098, 0.0219}}}
,  {Card::RANK_8, Card::RANK_2,  TRUE, {{0.0, 1.0}, {0.3786, 0.0542}, {0.2442, 0.0354}, {0.1830, 0.0300}, {0.1483, 0.0266}, {0.1237, 0.0239}, {0.1070, 0.0225}}}
,  {Card::RANK_7, Card::RANK_6,  TRUE, {{0.0, 1.0}, {0.4272, 0.0518}, {0.3008, 0.0349}, {0.2365, 0.0301}, {0.1939, 0.0281}, {0.1671, 0.0257}, {0.1469, 0.0242}}}
,  {Card::RANK_7, Card::RANK_5,  TRUE, {{0.0, 1.0}, {0.4085, 0.0555}, {0.2838, 0.0350}, {0.2190, 0.0291}, {0.1816, 0.0261}, {0.1553, 0.0243}, {0.1372, 0.0235}}}
,  {Card::RANK_7, Card::RANK_4,  TRUE, {{0.0, 1.0}, {0.3912, 0.0540}, {0.2684, 0.0348}, {0.2034, 0.0298}, {0.1649, 0.0264}, {0.1403, 0.0242}, {0.1226, 0.0227}}}
,  {Card::RANK_7, Card::RANK_3,  TRUE, {{0.0, 1.0}, {0.3722, 0.0544}, {0.2523, 0.0332}, {0.1931, 0.0264}, {0.1553, 0.0232}, {0.1322, 0.0218}, {0.1158, 0.0199}}}
,  {Card::RANK_7, Card::RANK_2,  TRUE, {{0.0, 1.0}, {0.3552, 0.0551}, {0.2323, 0.0327}, {0.1750, 0.0256}, {0.1408, 0.0221}, {0.1202, 0.0197}, {0.1060, 0.0188}}}
,  {Card::RANK_6, Card::RANK_5,  TRUE, {{0.0, 1.0}, {0.4032, 0.0545}, {0.2835, 0.0344}, {0.2199, 0.0289}, {0.1799, 0.0261}, {0.1555, 0.0241}, {0.1371, 0.0235}}}
,  {Card::RANK_6, Card::RANK_4,  TRUE, {{0.0, 1.0}, {0.3870, 0.0566}, {0.2713, 0.0347}, {0.2106, 0.0290}, {0.1738, 0.0260}, {0.1495, 0.0242}, {0.1316, 0.0225}}}
,  {Card::RANK_6, Card::RANK_3,  TRUE, {{0.0, 1.0}, {0.3697, 0.0578}, {0.2532, 0.0336}, {0.1944, 0.0264}, {0.1600, 0.0235}, {0.1368, 0.0212}, {0.1197, 0.0196}}}
,  {Card::RANK_6, Card::RANK_2,  TRUE, {{0.0, 1.0}, {0.3478, 0.0587}, {0.2310, 0.0329}, {0.1776, 0.0264}, {0.1464, 0.0229}, {0.1255, 0.0202}, {0.1112, 0.0193}}}
,  {Card::RANK_5, Card::RANK_4,  TRUE, {{0.0, 1.0}, {0.3820, 0.0617}, {0.2723, 0.0358}, {0.2125, 0.0294}, {0.1780, 0.0260}, {0.1536, 0.0242}, {0.1371, 0.0235}}}
,  {Card::RANK_5, Card::RANK_3,  TRUE, {{0.0, 1.0}, {0.3725, 0.0604}, {0.2630, 0.0344}, {0.2050, 0.0281}, {0.1698, 0.0248}, {0.1463, 0.0226}, {0.1306, 0.0217}}}
,  {Card::RANK_5, Card::RANK_2,  TRUE, {{0.0, 1.0}, {0.3520, 0.0558}, {0.2418, 0.0317}, {0.1855, 0.0268}, {0.1525, 0.0239}, {0.1312, 0.0221}, {0.1173, 0.0205}}}
,  {Card::RANK_4, Card::RANK_3,  TRUE, {{0.0, 1.0}, {0.3572, 0.0596}, {0.2520, 0.0326}, {0.1928, 0.0257}, {0.1585, 0.0232}, {0.1377, 0.0202}, {0.1227, 0.0189}}}
,  {Card::RANK_4, Card::RANK_2,  TRUE, {{0.0, 1.0}, {0.3420, 0.0569}, {0.2330, 0.0307}, {0.1764, 0.0246}, {0.1447, 0.0202}, {0.1260, 0.0182}, {0.1137, 0.0171}}}
,  {Card::RANK_3, Card::RANK_2,  TRUE, {{0.0, 1.0}, {0.3334, 0.0556}, {0.2235, 0.0300}, {0.1691, 0.0231}, {0.1400, 0.0194}, {0.1216, 0.0164}, {0.1083, 0.0148}}}
,  {Card::RANK_A, Card::RANK_K, FALSE, {{0.0, 1.0}, {0.6456, 0.0159}, {0.4740, 0.0192}, {0.3775, 0.0201}, {0.3151, 0.0209}, {0.2710, 0.0205}, {0.2378, 0.0203}}}
,  {Card::RANK_A, Card::RANK_Q, FALSE, {{0.0, 1.0}, {0.6355, 0.0184}, {0.4567, 0.0221}, {0.3565, 0.0231}, {0.2924, 0.0236}, {0.2477, 0.0235}, {0.2133, 0.0233}}}
,  {Card::RANK_A, Card::RANK_J, FALSE, {{0.0, 1.0}, {0.6234, 0.0204}, {0.4414, 0.0252}, {0.3400, 0.0259}, {0.2759, 0.0260}, {0.2302, 0.0262}, {0.1957, 0.0261}}}
,  {Card::RANK_A, Card::RANK_T, FALSE, {{0.0, 1.0}, {0.6156, 0.0231}, {0.4308, 0.0277}, {0.3278, 0.0287}, {0.2625, 0.0297}, {0.2178, 0.0300}, {0.1848, 0.0304}}}
,  {Card::RANK_A, Card::RANK_9, FALSE, {{0.0, 1.0}, {0.5935, 0.0265}, {0.3998, 0.0311}, {0.2958, 0.0312}, {0.2312, 0.0305}, {0.1873, 0.0295}, {0.1557, 0.0287}}}
,  {Card::RANK_A, Card::RANK_8, FALSE, {{0.0, 1.0}, {0.5863, 0.0305}, {0.3891, 0.0354}, {0.2834, 0.0357}, {0.2197, 0.0355}, {0.1765, 0.0348}, {0.1457, 0.0335}}}
,  {Card::RANK_A, Card::RANK_7, FALSE, {{0.0, 1.0}, {0.5745, 0.0332}, {0.3750, 0.0387}, {0.2692, 0.0378}, {0.2072, 0.0370}, {0.1667, 0.0363}, {0.1379, 0.0351}}}
,  {Card::RANK_A, Card::RANK_6, FALSE, {{0.0, 1.0}, {0.5570, 0.0359}, {0.3593, 0.0403}, {0.2556, 0.0401}, {0.1968, 0.0376}, {0.1578, 0.0361}, {0.1300, 0.0355}}}
,  {Card::RANK_A, Card::RANK_5, FALSE, {{0.0, 1.0}, {0.5578, 0.0393}, {0.3591, 0.0443}, {0.2588, 0.0423}, {0.2001, 0.0403}, {0.1614, 0.0394}, {0.1341, 0.0381}}}
,  {Card::RANK_A, Card::RANK_4, FALSE, {{0.0, 1.0}, {0.5492, 0.0392}, {0.3522, 0.0425}, {0.2522, 0.0407}, {0.1943, 0.0390}, {0.1581, 0.0374}, {0.1318, 0.0361}}}
,  {Card::RANK_A, Card::RANK_3, FALSE, {{0.0, 1.0}, {0.5386, 0.0400}, {0.3431, 0.0431}, {0.2449, 0.0415}, {0.1887, 0.0392}, {0.1524, 0.0366}, {0.1269, 0.0350}}}
,  {Card::RANK_A, Card::RANK_2, FALSE, {{0.0, 1.0}, {0.5302, 0.0388}, {0.3300, 0.0421}, {0.2357, 0.0389}, {0.1807, 0.0358}, {0.1460, 0.0333}, {0.1221, 0.0315}}}
,  {Card::RANK_K, Card::RANK_Q, FALSE, {{0.0, 1.0}, {0.6058, 0.0199}, {0.4355, 0.0216}, {0.3448, 0.0218}, {0.2852, 0.0218}, {0.2426, 0.0220}, {0.2103, 0.0216}}}
,  {Card::RANK_K, Card::RANK_J, FALSE, {{0.0, 1.0}, {0.5963, 0.0229}, {0.4210, 0.0259}, {0.3263, 0.0262}, {0.2670, 0.0259}, {0.2242, 0.0257}, {0.1910, 0.0254}}}
,  {Card::RANK_K, Card::RANK_T, FALSE, {{0.0, 1.0}, {0.5844, 0.0246}, {0.4059, 0.0283}, {0.3111, 0.0284}, {0.2525, 0.0278}, {0.2106, 0.0275}, {0.1791, 0.0277}}}
,  {Card::RANK_K, Card::RANK_9, FALSE, {{0.0, 1.0}, {0.5614, 0.0282}, {0.3762, 0.0313}, {0.2807, 0.0303}, {0.2221, 0.0287}, {0.1826, 0.0281}, {0.1533, 0.0274}}}
,  {Card::RANK_K, Card::RANK_8, FALSE, {{0.0, 1.0}, {0.5430, 0.0315}, {0.3519, 0.0342}, {0.2537, 0.0331}, {0.1969, 0.0316}, {0.1586, 0.0302}, {0.1309, 0.0295}}}
,  {Card::RANK_K, Card::RANK_7, FALSE, {{0.0, 1.0}, {0.5319, 0.0354}, {0.3410, 0.0369}, {0.2445, 0.0359}, {0.1869, 0.0341}, {0.1492, 0.0330}, {0.1229, 0.0320}}}
,  {Card::RANK_K, Card::RANK_6, FALSE, {{0.0, 1.0}, {0.5210, 0.0395}, {0.3300, 0.0402}, {0.2358, 0.0379}, {0.1797, 0.0359}, {0.1437, 0.0348}, {0.1175, 0.0336}}}
,  {Card::RANK_K, Card::RANK_5, FALSE, {{0.0, 1.0}, {0.5123, 0.0411}, {0.3191, 0.0412}, {0.2259, 0.0387}, {0.1733, 0.0363}, {0.1388, 0.0347}, {0.1135, 0.0336}}}
,  {Card::RANK_K, Card::RANK_4, FALSE, {{0.0, 1.0}, {0.5024, 0.0425}, {0.3129, 0.0418}, {0.2197, 0.0378}, {0.1672, 0.0355}, {0.1333, 0.0339}, {0.1101, 0.0325}}}
,  {Card::RANK_K, Card::RANK_3, FALSE, {{0.0, 1.0}, {0.4931, 0.0421}, {0.3011, 0.0404}, {0.2120, 0.0367}, {0.1610, 0.0335}, {0.1283, 0.0315}, {0.1049, 0.0294}}}
,  {Card::RANK_K, Card::RANK_2, FALSE, {{0.0, 1.0}, {0.4860, 0.0413}, {0.2942, 0.0402}, {0.2057, 0.0356}, {0.1560, 0.0321}, {0.1258, 0.0296}, {0.1039, 0.0278}}}
,  {Card::RANK_Q, Card::RANK_J, FALSE, {{0.0, 1.0}, {0.5700, 0.0251}, {0.4027, 0.0262}, {0.3138, 0.0257}, {0.2572, 0.0255}, {0.2170, 0.0255}, {0.1866, 0.0250}}}
,  {Card::RANK_Q, Card::RANK_T, FALSE, {{0.0, 1.0}, {0.5595, 0.0275}, {0.3892, 0.0286}, {0.2989, 0.0285}, {0.2424, 0.0275}, {0.2035, 0.0276}, {0.1721, 0.0277}}}
,  {Card::RANK_Q, Card::RANK_9, FALSE, {{0.0, 1.0}, {0.5369, 0.0293}, {0.3577, 0.0297}, {0.2675, 0.0286}, {0.2125, 0.0285}, {0.1745, 0.0281}, {0.1460, 0.0271}}}
,  {Card::RANK_Q, Card::RANK_8, FALSE, {{0.0, 1.0}, {0.5177, 0.0328}, {0.3377, 0.0319}, {0.2473, 0.0303}, {0.1919, 0.0280}, {0.1541, 0.0275}, {0.1274, 0.0270}}}
,  {Card::RANK_Q, Card::RANK_7, FALSE, {{0.0, 1.0}, {0.4986, 0.0378}, {0.3135, 0.0365}, {0.2227, 0.0342}, {0.1693, 0.0320}, {0.1343, 0.0310}, {0.1087, 0.0310}}}
,  {Card::RANK_Q, Card::RANK_6, FALSE, {{0.0, 1.0}, {0.4864, 0.0410}, {0.3035, 0.0393}, {0.2145, 0.0360}, {0.1632, 0.0337}, {0.1287, 0.0325}, {0.1050, 0.0314}}}
,  {Card::RANK_Q, Card::RANK_5, FALSE, {{0.0, 1.0}, {0.4837, 0.0430}, {0.2965, 0.0399}, {0.2078, 0.0372}, {0.1582, 0.0346}, {0.1254, 0.0334}, {0.1025, 0.0318}}}
,  {Card::RANK_Q, Card::RANK_4, FALSE, {{0.0, 1.0}, {0.4708, 0.0423}, {0.2846, 0.0405}, {0.2002, 0.0369}, {0.1510, 0.0340}, {0.1195, 0.0321}, {0.0972, 0.0303}}}
,  {Card::RANK_Q, Card::RANK_3, FALSE, {{0.0, 1.0}, {0.4636, 0.0433}, {0.2765, 0.0403}, {0.1919, 0.0354}, {0.1454, 0.0316}, {0.1149, 0.0297}, {0.0941, 0.0278}}}
,  {Card::RANK_Q, Card::RANK_2, FALSE, {{0.0, 1.0}, {0.4511, 0.0428}, {0.2694, 0.0381}, {0.1870, 0.0330}, {0.1423, 0.0300}, {0.1131, 0.0274}, {0.0923, 0.0257}}}
,  {Card::RANK_J, Card::RANK_T, FALSE, {{0.0, 1.0}, {0.5394, 0.0286}, {0.3772, 0.0291}, {0.2943, 0.0275}, {0.2401, 0.0274}, {0.2017, 0.0272}, {0.1727, 0.0276}}}
,  {Card::RANK_J, Card::RANK_9, FALSE, {{0.0, 1.0}, {0.5153, 0.0322}, {0.3479, 0.0313}, {0.2631, 0.0297}, {0.2101, 0.0285}, {0.1725, 0.0277}, {0.1449, 0.0272}}}
,  {Card::RANK_J, Card::RANK_8, FALSE, {{0.0, 1.0}, {0.4976, 0.0358}, {0.3265, 0.0338}, {0.2417, 0.0312}, {0.1902, 0.0301}, {0.1551, 0.0291}, {0.1293, 0.0282}}}
,  {Card::RANK_J, Card::RANK_7, FALSE, {{0.0, 1.0}, {0.4796, 0.0390}, {0.3056, 0.0369}, {0.2213, 0.0337}, {0.1716, 0.0316}, {0.1363, 0.0305}, {0.1124, 0.0301}}}
,  {Card::RANK_J, Card::RANK_6, FALSE, {{0.0, 1.0}, {0.4538, 0.0414}, {0.2812, 0.0377}, {0.2002, 0.0335}, {0.1518, 0.0318}, {0.1196, 0.0309}, {0.0974, 0.0302}}}
,  {Card::RANK_J, Card::RANK_5, FALSE, {{0.0, 1.0}, {0.4453, 0.0463}, {0.2694, 0.0407}, {0.1893, 0.0354}, {0.1431, 0.0327}, {0.1121, 0.0316}, {0.0902, 0.0305}}}
,  {Card::RANK_J, Card::RANK_4, FALSE, {{0.0, 1.0}, {0.4381, 0.0462}, {0.2618, 0.0398}, {0.1826, 0.0342}, {0.1372, 0.0316}, {0.1073, 0.0298}, {0.0879, 0.0280}}}
,  {Card::RANK_J, Card::RANK_3, FALSE, {{0.0, 1.0}, {0.4298, 0.0462}, {0.2561, 0.0399}, {0.1789, 0.0345}, {0.1344, 0.0312}, {0.1061, 0.0293}, {0.0868, 0.0279}}}
,  {Card::RANK_J, Card::RANK_2, FALSE, {{0.0, 1.0}, {0.4187, 0.0465}, {0.2467, 0.0382}, {0.1707, 0.0324}, {0.1286, 0.0289}, {0.1024, 0.0263}, {0.0832, 0.0256}}}
,  {Card::RANK_T, Card::RANK_9, FALSE, {{0.0, 1.0}, {0.4983, 0.0342}, {0.3429, 0.0315}, {0.2623, 0.0301}, {0.2116, 0.0297}, {0.1747, 0.0293}, {0.1476, 0.0291}}}
,  {Card::RANK_T, Card::RANK_8, FALSE, {{0.0, 1.0}, {0.4774, 0.0384}, {0.3176, 0.0337}, {0.2395, 0.0306}, {0.1899, 0.0292}, {0.1557, 0.0283}, {0.1310, 0.0278}}}
,  {Card::RANK_T, Card::RANK_7, FALSE, {{0.0, 1.0}, {0.4571, 0.0408}, {0.2946, 0.0355}, {0.2169, 0.0328}, {0.1701, 0.0306}, {0.1372, 0.0297}, {0.1136, 0.0293}}}
,  {Card::RANK_T, Card::RANK_6, FALSE, {{0.0, 1.0}, {0.4408, 0.0438}, {0.2739, 0.0381}, {0.1975, 0.0332}, {0.1508, 0.0315}, {0.1196, 0.0318}, {0.0985, 0.0308}}}
,  {Card::RANK_T, Card::RANK_5, FALSE, {{0.0, 1.0}, {0.4199, 0.0479}, {0.2550, 0.0395}, {0.1807, 0.0350}, {0.1371, 0.0321}, {0.1073, 0.0311}, {0.0874, 0.0306}}}
,  {Card::RANK_T, Card::RANK_4, FALSE, {{0.0, 1.0}, {0.4115, 0.0485}, {0.2467, 0.0389}, {0.1724, 0.0339}, {0.1284, 0.0320}, {0.1009, 0.0307}, {0.0821, 0.0294}}}
,  {Card::RANK_T, Card::RANK_3, FALSE, {{0.0, 1.0}, {0.4023, 0.0493}, {0.2402, 0.0383}, {0.1678, 0.0330}, {0.1254, 0.0305}, {0.0994, 0.0286}, {0.0810, 0.0272}}}
,  {Card::RANK_T, Card::RANK_2, FALSE, {{0.0, 1.0}, {0.3925, 0.0479}, {0.2319, 0.0369}, {0.1608, 0.0300}, {0.1211, 0.0276}, {0.0959, 0.0257}, {0.0782, 0.0247}}}
,  {Card::RANK_9, Card::RANK_8, FALSE, {{0.0, 1.0}, {0.4607, 0.0398}, {0.3106, 0.0331}, {0.2363, 0.0302}, {0.1872, 0.0290}, {0.1539, 0.0277}, {0.1299, 0.0268}}}
,  {Card::RANK_9, Card::RANK_7, FALSE, {{0.0, 1.0}, {0.4426, 0.0444}, {0.2928, 0.0355}, {0.2175, 0.0307}, {0.1713, 0.0297}, {0.1400, 0.0284}, {0.1170, 0.0277}}}
,  {Card::RANK_9, Card::RANK_6, FALSE, {{0.0, 1.0}, {0.4202, 0.0480}, {0.2703, 0.0370}, {0.1963, 0.0327}, {0.1523, 0.0302}, {0.1226, 0.0287}, {0.1021, 0.0269}}}
,  {Card::RANK_9, Card::RANK_5, FALSE, {{0.0, 1.0}, {0.4009, 0.0506}, {0.2487, 0.0376}, {0.1771, 0.0316}, {0.1342, 0.0291}, {0.1062, 0.0279}, {0.0869, 0.0274}}}
,  {Card::RANK_9, Card::RANK_4, FALSE, {{0.0, 1.0}, {0.3788, 0.0515}, {0.2266, 0.0372}, {0.1576, 0.0310}, {0.1183, 0.0283}, {0.0927, 0.0273}, {0.0747, 0.0266}}}
,  {Card::RANK_9, Card::RANK_3, FALSE, {{0.0, 1.0}, {0.3768, 0.0521}, {0.2249, 0.0377}, {0.1546, 0.0316}, {0.1150, 0.0286}, {0.0904, 0.0262}, {0.0729, 0.0246}}}
,  {Card::RANK_9, Card::RANK_2, FALSE, {{0.0, 1.0}, {0.3637, 0.0520}, {0.2125, 0.0364}, {0.1461, 0.0305}, {0.1090, 0.0271}, {0.0852, 0.0246}, {0.0690, 0.0233}}}
,  {Card::RANK_8, Card::RANK_7, FALSE, {{0.0, 1.0}, {0.4268, 0.0464}, {0.2889, 0.0339}, {0.2177, 0.0300}, {0.1710, 0.0286}, {0.1405, 0.0264}, {0.1190, 0.0247}}}
,  {Card::RANK_8, Card::RANK_6, FALSE, {{0.0, 1.0}, {0.4047, 0.0514}, {0.2658, 0.0370}, {0.1972, 0.0319}, {0.1544, 0.0293}, {0.1266, 0.0279}, {0.1063, 0.0269}}}
,  {Card::RANK_8, Card::RANK_5, FALSE, {{0.0, 1.0}, {0.3907, 0.0544}, {0.2491, 0.0380}, {0.1808, 0.0329}, {0.1393, 0.0294}, {0.1122, 0.0275}, {0.0939, 0.0262}}}
,  {Card::RANK_8, Card::RANK_4, FALSE, {{0.0, 1.0}, {0.3684, 0.0553}, {0.2287, 0.0364}, {0.1617, 0.0299}, {0.1228, 0.0277}, {0.0975, 0.0258}, {0.0803, 0.0243}}}
,  {Card::RANK_8, Card::RANK_3, FALSE, {{0.0, 1.0}, {0.3483, 0.0545}, {0.2074, 0.0361}, {0.1434, 0.0306}, {0.1065, 0.0275}, {0.0828, 0.0252}, {0.0677, 0.0237}}}
,  {Card::RANK_8, Card::RANK_2, FALSE, {{0.0, 1.0}, {0.3404, 0.0544}, {0.2014, 0.0356}, {0.1377, 0.0292}, {0.1026, 0.0260}, {0.0807, 0.0235}, {0.0665, 0.0219}}}
,  {Card::RANK_7, Card::RANK_6, FALSE, {{0.0, 1.0}, {0.3946, 0.0529}, {0.2660, 0.0358}, {0.1992, 0.0303}, {0.1569, 0.0282}, {0.1289, 0.0264}, {0.1093, 0.0250}}}
,  {Card::RANK_7, Card::RANK_5, FALSE, {{0.0, 1.0}, {0.3738, 0.0567}, {0.2456, 0.0363}, {0.1809, 0.0313}, {0.1410, 0.0285}, {0.1158, 0.0269}, {0.0983, 0.0252}}}
,  {Card::RANK_7, Card::RANK_4, FALSE, {{0.0, 1.0}, {0.3577, 0.0580}, {0.2295, 0.0365}, {0.1661, 0.0306}, {0.1279, 0.0275}, {0.1029, 0.0250}, {0.0871, 0.0235}}}
,  {Card::RANK_7, Card::RANK_3, FALSE, {{0.0, 1.0}, {0.3345, 0.0571}, {0.2075, 0.0345}, {0.1456, 0.0283}, {0.1091, 0.0251}, {0.0872, 0.0234}, {0.0733, 0.0218}}}
,  {Card::RANK_7, Card::RANK_2, FALSE, {{0.0, 1.0}, {0.3156, 0.0574}, {0.1887, 0.0352}, {0.1294, 0.0286}, {0.0972, 0.0247}, {0.0766, 0.0226}, {0.0626, 0.0213}}}
,  {Card::RANK_6, Card::RANK_5, FALSE, {{0.0, 1.0}, {0.3700, 0.0590}, {0.2494, 0.0366}, {0.1845, 0.0308}, {0.1455, 0.0278}, {0.1204, 0.0256}, {0.1036, 0.0247}}}
,  {Card::RANK_6, Card::RANK_4, FALSE, {{0.0, 1.0}, {0.3501, 0.0594}, {0.2296, 0.0354}, {0.1682, 0.0295}, {0.1306, 0.0269}, {0.1075, 0.0247}, {0.0915, 0.0237}}}
,  {Card::RANK_6, Card::RANK_3, FALSE, {{0.0, 1.0}, {0.3302, 0.0600}, {0.2119, 0.0347}, {0.1519, 0.0284}, {0.1169, 0.0252}, {0.0952, 0.0229}, {0.0803, 0.0212}}}
,  {Card::RANK_6, Card::RANK_2, FALSE, {{0.0, 1.0}, {0.3118, 0.0614}, {0.1929, 0.0354}, {0.1352, 0.0285}, {0.1018, 0.0248}, {0.0822, 0.0219}, {0.0690, 0.0203}}}
,  {Card::RANK_5, Card::RANK_4, FALSE, {{0.0, 1.0}, {0.3485, 0.0627}, {0.2360, 0.0371}, {0.1755, 0.0310}, {0.1380, 0.0275}, {0.1138, 0.0263}, {0.0982, 0.0250}}}
,  {Card::RANK_5, Card::RANK_3, FALSE, {{0.0, 1.0}, {0.3271, 0.0624}, {0.2155, 0.0354}, {0.1568, 0.0285}, {0.1224, 0.0252}, {0.1008, 0.0232}, {0.0868, 0.0216}}}
,  {Card::RANK_5, Card::RANK_2, FALSE, {{0.0, 1.0}, {0.3105, 0.0628}, {0.1995, 0.0347}, {0.1418, 0.0282}, {0.1102, 0.0241}, {0.0902, 0.0221}, {0.0775, 0.0207}}}
,  {Card::RANK_4, Card::RANK_3, FALSE, {{0.0, 1.0}, {0.3199, 0.0617}, {0.2099, 0.0343}, {0.1516, 0.0278}, {0.1185, 0.0239}, {0.0978, 0.0219}, {0.0843, 0.0203}}}
,  {Card::RANK_4, Card::RANK_2, FALSE, {{0.0, 1.0}, {0.3009, 0.0612}, {0.1910, 0.0329}, {0.1342, 0.0256}, {0.1037, 0.0223}, {0.0855, 0.0199}, {0.0737, 0.0178}}}
,  {Card::RANK_3, Card::RANK_2, FALSE, {{0.0, 1.0}, {0.2922, 0.0613}, {0.1839, 0.0322}, {0.1298, 0.0254}, {0.1012, 0.0202}, {0.0832, 0.0179}, {0.0715, 0.0161}}}
}; // static const DealTable dealTable

//----------------------------------------------------------------------------
//
// Subroutine-
//       getRating
//
// Purpose-
//       Rate the dealt Hand.
//
//----------------------------------------------------------------------------
static void
   getRating(                       // Get associated Rating
     PokerRating&      result,      // Resultant Rating
     int               playerCount, // Number of players
     Card*             down[])      // The down Cards
{
   Card::Rank          rankHi;      // Higher card's Rank
   Card::Rank          rankLo;      // Lower card's Rank
   int                 suited;      // TRUE iff suited

   int                 i;

   rankHi= down[0]->getRank();
   rankLo= down[1]->getRank();
   if( rankHi < rankLo )
   {
     rankHi= down[1]->getRank();
     rankLo= down[0]->getRank();
   }

   suited= FALSE;
   if( down[0]->getSuit() == down[1]->getSuit() )
     suited= TRUE;

   result.twoRate= 0.0;
   result.twoWins= 0.0;
   result.twoTies= 0.0;
   result.twoLoss= 0.0;

   result.allRate= 0.0;
   result.allWins= 0.0;
   result.allTies= 0.0;
   result.allLoss= 0.0;
   for(i= 0; i<DIM_DEALTABLE; i++)
   {
     if( dealTable[i].downHi == rankHi
         && dealTable[i].downLo == rankLo
         && dealTable[i].suited == suited )
     {
       result.twoWins= dealTable[i].evaluation[1].rateWins;
       result.twoTies= dealTable[i].evaluation[1].rateTies;
       result.twoRate= result.twoWins + result.twoTies;
       result.twoLoss= 1.0 - result.twoRate;

       result.allWins= dealTable[i].evaluation[playerCount-1].rateWins;
       result.allTies= dealTable[i].evaluation[playerCount-1].rateTies;
       result.allRate= result.allWins + result.allTies;
       result.allLoss= 1.0 - result.allRate;
       break;
     }
   }
}

//----------------------------------------------------------------------------
//
// Subroutine-
//       isMucked
//
// Purpose-
//       Determine whether a card is mucked.
//
//----------------------------------------------------------------------------
inline int                          // TRUE iff mucked
   isMucked(                        // Is card mucked?
     int               muckCount,   // Number of mucked Cards
     Card**            muckArray,   // The mucked Cards
     Card*             card)        // The Card
{
   int                 result= FALSE; // Resultant

   int                 i;

   for(i= 0; i<muckCount; i++)
   {
     if( card->getRank() == muckArray[i]->getRank()
         && card->getSuit() == muckArray[i]->getSuit() )
     {
       result= TRUE;
       break;
     }
   }

   return result;
}

//----------------------------------------------------------------------------
//
// Static Method-
//       TexasStrategy::getRating
//
// Purpose-
//       Rate a Hand.
//
// Description-
//       For the deal, a pre-computed evaluation array is used.
//
//       Otherwise, he hand is rated using a monte-carlo simulation of
//       ITERATIONS deals. For each deal, the player's hand is compared to
//       each of he other player's hands. Each such comparison results in
//       either a win, tie or loss.
//
//       For two players, an arbitrary player is chosen for comparison.  The
//       all-player result is a comparison against ALL the other players.
//       The player must defeat ALL other players for a win, at least tie ALL
//       other players for a tie, and a loss against ANY player is a loss
//
//       There is no error checking. In particular, the player's cards and
//       the mucked cards are not checked for duplicates.
//
//----------------------------------------------------------------------------
void
   TexasStrategy::getRating(        // Get associated Rating
     PokerRating&      result,      // Resultant Rating
     int               playerCount, // Number of Players
     int               cardCount,   // Number of Cards
     Card**            cardArray,   // The Player's Cards
     int               muckCount,   // Number of mucked Cards
     Card**            muckArray)   // The mucked Cards
{
   Card*               card;        // Working Card
   int                 cc;          // Comparison code
   Deck                deck;        // Working Deck
   Card*               downHi[PLAYERS]; // Second down card
   Card*               downLo[PLAYERS]; // First down card
   int                 hand;        // max(Number of hands,1)
   PokerHand           handPlay;    // The Player's hand
   PokerHand           handThey;    // The Opponent's hand
   int                 iteration;   // Iteration number
   int                 loadCount;   // The number of cards in load
   Card*               load[9];     // Working hand loader
   int                 noHand;      // The number of hands
   int                 noTies[2];   // The number of ties
   int                 noWins[2];   // The number of wins
   int                 winner[PLAYERS]; // The winner array

   int                 i;
   int                 j;

   if( FALSE )
   {
     char string[128];
     printf("TexasTable::rate(),%d", playerCount);
     printf(",%d,{", cardCount);
     for(i= 0; i<cardCount; i++)

     {
       if( i != 0 )
         printf(",");
       printf("%s", cardArray[i]->toShortString(string));
     }
     printf("}");

     printf(",%d,{", muckCount);
     for(i= 0; i<muckCount; i++)
     {
       if( i != 0 )
         printf(",");
       printf("%s", muckArray[i]->toShortString(string));
     }
     printf("}\n");
   }

   if( playerCount < 2 )
   {
     result.twoRate= 1.0;
     result.twoWins= 0.0;
     result.twoTies= 1.0;
     result.twoLoss= 0.0;

     result.allRate= 1.0;
     result.allWins= 0.0;
     result.allTies= 1.0;
     result.allLoss= 0.0;
     return;
   }
   if( playerCount > PLAYERS )
     playerCount= PLAYERS;

   if( cardCount < 2 || cardCount > 7 )
   {
     result.twoRate= 0.0;
     result.twoWins= 0.0;
     result.twoTies= 0.0;
     result.twoLoss= 1.0;

     result.allWins= 0.0;
     result.allTies= 0.0;
     result.allLoss= 1.0;
     return;
   }

   // Use precomputed rating for DEAL
   if( cardCount == 2 && muckCount == 0 )
   {
     ::getRating(result, playerCount, cardArray);
     return;
   }

   //-------------------------------------------------------------------------
   // Monte-carlo hand evaluator
   //-------------------------------------------------------------------------
   loadCount= cardCount;
   for(i= 0; i<loadCount; i++)
     load[i]= cardArray[i];

   noHand= 0;
   noTies[0]= 0;
   noWins[0]= 0;
   noTies[1]= 0;
   noWins[1]= 0;

   downHi[0]= load[0];
   downLo[0]= load[1];
   for(iteration= 0; iteration<ITERATIONS; iteration++)
   {
     // Suffle the deck
     deck.shuffle();

     // Deal the cards
     for(i= loadCount; i<7; i++)
     {
       for(;;)
       {
         card= deck.deal();
         for(j= 0; j<i; j++)
         {
           if( card->getRank() == load[j]->getRank()
               && card->getSuit() == load[j]->getSuit() )
           {
             card= NULL;
             break;
           }
         }
         if( card == NULL || isMucked(muckCount, muckArray, card) )
           continue;

         break;
       }

       load[i]= card;
     }

     for(i= 1; i<playerCount; i++)
     {
       for(;;)
       {
         card= deck.deal();
         for(j= 0; j<7; j++)
         {
           if( card->getRank() == load[j]->getRank()
               && card->getSuit() == load[j]->getSuit() )
           {
             card= NULL;
             break;
           }
         }
         if( card == NULL || isMucked(muckCount, muckArray, card) )
           continue;

         break;
       }

       downHi[i]= card;
     }

     for(i= 1; i<playerCount; i++)
     {
       for(;;)
       {
         card= deck.deal();
         for(j= 0; j<7; j++)
         {
           if( card->getRank() == load[j]->getRank()
               && card->getSuit() == load[j]->getSuit() )
           {
             card= NULL;
             break;
           }
         }
         if( card == NULL || isMucked(muckCount, muckArray, card) )
           continue;

         break;
       }

       downLo[i]= card;
     }

     // Load and compare the hands
     handPlay.load(7, &load[0]);
     for(i= 1; i<playerCount; i++)
     {
       load[7]= downLo[i];
       load[8]= downHi[i];
       handThey.load(7, &load[2]);
       winner[i]= handPlay.compare(handThey);
     }

     // Count result against ONE player (twoRate)
     cc= winner[1];
     if( cc >= 0 )
     {
       if( cc > 0 )
         noWins[0]++;
       else
         noTies[0]++;
     }

     // Count result against ALL players (allRate)
     for(i= 2; i<playerCount; i++)
     {
       if( cc > winner[i] )
         cc= winner[i];
     }

     if( cc >= 0 )
     {
       if( cc > 0 )
         noWins[1]++;
       else
         noTies[1]++;
     }

     noHand++;
   }

   hand= noHand;
   if( hand == 0 )
     hand= 1;
   result.twoRate= double(noWins[0]+noTies[0])/double(hand);
   result.twoWins= double(noWins[0])/double(hand);
   result.twoTies= double(noTies[0])/double(hand);
   result.twoLoss= double(noHand-noWins[0]-noTies[0])/double(hand);

   result.allRate= double(noWins[1]+noTies[1])/double(hand);
   result.allWins= double(noWins[1])/double(hand);
   result.allTies= double(noTies[1])/double(hand);
   result.allLoss= double(noHand-noWins[1]-noTies[1])/double(hand);
}

//----------------------------------------------------------------------------
//
// Method-
//       TexasStrategy::~TexasStrategy
//
// Purpose-
//       Destructor.
//
//----------------------------------------------------------------------------
   TexasStrategy::~TexasStrategy( void ) // Destructor
{
   #ifdef HCDM
     printf("TexasStrategy(%p)::~TexasStrategy()\n", this);
   #endif
}

//----------------------------------------------------------------------------
//
// Method-
//       TexasStrategy::TexasStrategy
//
// Purpose-
//       Constructor.
//
//----------------------------------------------------------------------------
   TexasStrategy::TexasStrategy(    // Constructor
     PokerPlayer*      player,      // The PokerPlayer
     PokerTable*       table,       // The PokerTable
     Model             model)       // The outerlying Model
:  PokerStrategy(player, table, model)
{
   #ifdef HCDM
     printf("TexasStrategy(%p)::TexasStrategy()\n", this);
   #endif
}

//----------------------------------------------------------------------------
//
// Method-
//       TexasStrategy::bet
//
// Purpose-
//       Make a bet.
//
//----------------------------------------------------------------------------
int                                 // Actual bet
   TexasStrategy::bet(              // Make a bet
     int               amount)      // Minimum to call
{
   #ifdef HCDM
     printf("TexasStrategy(%p)::bet(%d)\n", this, amount);
   #endif

   return PokerStrategy::bet(amount);
}

//----------------------------------------------------------------------------
//
// Method-
//       TexasStrategy::rate
//
// Purpose-
//       Rate a Hand.
//
//----------------------------------------------------------------------------
void
   TexasStrategy::rate( void )      // Rate a Hand
{
   PokerTable*         table= getTable();

   Card*               load[7];     // The Player's Cards

   player->store(load);             // Store the Cards
   getRating(rating, table->getActiveCount(), player->getCardCount(), load);

   #ifdef HCDM
     printf("TexasStrategy(%p)::rate(", this);
     result.display();
     printf(") %s\n", player->getName());
   #endif
}

//----------------------------------------------------------------------------
//
// Method-
//       TexasStrategy::reset
//
// Purpose-
//       Reset the TexasStrategy.
//
//----------------------------------------------------------------------------
void
   TexasStrategy::reset( void )     // Reset the TexasStrategy
{
   #ifdef HCDM
     printf("TexasStrategy(%p)::reset()\n", this);
   #endif

   PokerStrategy::reset();
}

//----------------------------------------------------------------------------
//
// Method-
//       TexasTable::~TexasTable
//
// Purpose-
//       Destructor.
//
//----------------------------------------------------------------------------
   TexasTable::~TexasTable( void )  // Destructor
{
   #ifdef HCDM
     printf("TexasTable(%p)::~TexasTable()\n", this);
   #endif
}

//----------------------------------------------------------------------------
//
// Method-
//       TexasTable::TexasTable
//
// Purpose-
//       Constructor.
//
//----------------------------------------------------------------------------
   TexasTable::TexasTable( void )   // Default constructor
:  PokerTable()
,  boardCount(0)
{
   #ifdef HCDM
     printf("TexasTable(%p)::TexasTable()\n", this);
   #endif

   game= "Texas hold\'em";
   roundCount= 4;
}

//----------------------------------------------------------------------------
//
// Method-
//       TexasTable::makeStrategy
//
// Purpose-
//       Create a Strategy
//
//----------------------------------------------------------------------------
Strategy*                           // -> new Strategy
   TexasTable::makeStrategy(        // Make a Strategy
     Player*           player)      // For this Player
{
   return new TexasStrategy(check_cast(PokerPlayer*, player), this,
                            PokerStrategy::MODEL_DEFAULT);
}

//----------------------------------------------------------------------------
//
// Method-
//       TexasTable::playHand
//
// Purpose-
//       Play a hand
//
//----------------------------------------------------------------------------
void
   TexasTable::playHand( void )     // Play one Hand
{
   char                string[Card::SIZE_NAME]; // Working string

   Card*               card;        // Working card
   int                 seat;        // Seat index
   int                 i;

   #ifdef HCDM
     printf("TexasTable(%p)::play() %s\n", this, name);
   #endif

   //-------------------------------------------------------------------------
   // Initialize
   //-------------------------------------------------------------------------
   boardCount= 0;

   //-------------------------------------------------------------------------
   // Deal the down cards
   //-------------------------------------------------------------------------
   printf("%6d The DEAL:\n", pot);
   for(seat= 0; seat<playerCount; seat++)
     downHi[seat]= deck.deal();

   for(seat= 0; seat<playerCount; seat++)
     downLo[seat]= deck.deal();

   for(seat= 0; seat<playerCount; seat++)
   {
     if( downLo[seat]->getRank() > downHi[seat]->getRank() )
     {
       card= downHi[seat];
       downHi[seat]= downLo[seat];
       downLo[seat]= card;
     }

     player[seat]->addCard(downHi[seat]);
     player[seat]->addCard(downLo[seat]);
   }

   seat= button;
   seat= nextSeat(seat);            // Small blind seat
   seat= nextSeat(seat);            // Big blind seat, last to act
   betAround(seat);

   //-------------------------------------------------------------------------
   // Deal the flop
   //-------------------------------------------------------------------------
   if( getActiveCount() > 1 )
   {
     deck.deal();                   // BURN a card
     for(i= 0; i<3; i++)
     {
       card= deck.deal();
       card->setVisible(TRUE);
       board[boardCount++]= card;
       for(seat= 0; seat<playerCount; seat++)
         player[seat]->addCard(card);
     }

     printf("%6d The FLOP:", pot);
     for(i= 0; i<boardCount; i++)
       printf(" %s", board[i]->toShortString(string));
     printf("\n");

     betAround(button);
   }

   //-------------------------------------------------------------------------
   // Deal the turn
   //-------------------------------------------------------------------------
   if( getActiveCount() > 1 )
   {
     deck.deal();                   // BURN a card
     card= deck.deal();
     card->setVisible(TRUE);
     board[boardCount++]= card;
     for(seat= 0; seat<playerCount; seat++)
       player[seat]->addCard(card);

     printf("%6d The TURN:", pot);
     for(i= 0; i<boardCount; i++)
       printf(" %s", board[i]->toShortString(string));
     printf("\n");

     betAround(button);
   }

   //-------------------------------------------------------------------------
   // Deal the river
   //-------------------------------------------------------------------------
   if( getActiveCount() > 1 )
   {
     deck.deal();                   // BURN a card
     card= deck.deal();
     card->setVisible(TRUE);
     board[boardCount++]= card;
     for(seat= 0; seat<playerCount; seat++)
       player[seat]->addCard(card);

     printf("%6d The RIVER:", pot);
     for(i= 0; i<boardCount; i++)
       printf(" %s", board[i]->toShortString(string));
     printf("\n");

     betAround(button);
   }
}

//----------------------------------------------------------------------------
//
// Method-
//       TexasTable::showDown
//
// Purpose-
//       Show the Hands.
//
//----------------------------------------------------------------------------
void
   TexasTable::showDown( void )     // Show the Hands
{
   char                stringHi[Card::SIZE_NAME]; // Working string
   char                stringLo[Card::SIZE_NAME]; // Working string

   PokerHand           hand;        // Working PokerHand
   Card*               load[7];     // PokerHand load
   int                 seat;

   int                 i;

   printf("%6d The board:", pot);
   for(i= 0; i<boardCount; i++)
   {
     printf(" %s", board[i]->toShortString(stringHi));
     load[i]= board[i];
   }
   printf("\n");

   for(seat= 0; seat<playerCount; seat++)
   {
     printf("%6d [%2d] %6d %8s ", amount[seat], seat,
            getPlayer(seat)->getStake(), player[seat]->getName());
     if( payout[seat] > 0 )
       printf("%6d ", payout[seat]-amount[seat]);
     else if( folded[seat] )
       printf("FOLDED ");
     else if( getPlayer(seat)->getStake() == 0 )
       printf("*LOST* ");
     else
       printf("  LOST ");

     printf("with %s %s ",
            downHi[seat]->toShortString(stringHi),
            downLo[seat]->toShortString(stringLo));

     load[boardCount+0]= downHi[seat];
     load[boardCount+1]= downLo[seat];
     hand.load(boardCount+2, load);
     printf("%s\n", hand.getRankName());
   }
}

