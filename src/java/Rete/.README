##############################################################################
##
##       Copyright (C) 2013 Frank Eskesen.
##
##       This file is free content, distributed under the MIT license.
##       (See accompanying file LICENSE.MIT or the original contained
##       within https://opensource.org/licenses/MIT)
##
##############################################################################
##
## Title-
##       src/java/Rete/.README
##
## Purpose-
##       Documentation/change log.
##
## Last change date-
##       2013/01/01
##
##############################################################################
##
## Implementation notes-
##   Not implemented: negative-join, NCC-join pages 154..157
##
##   Implementation status-
##       Pass II: pg. 152 join-node-left-activation
##
##   Object name reference:
##       AME              <= item-in-alpha-memory
##       AM_Node          <= alpha-memory
##       BM_Node          <= beta-memory
##       JoinNode         <= join-node
##       JoinTest         <= test-at-join-node
##       Node             <= rete-node
##       Rete             <= rete
##
##       AM_Hash          <= (unnamed alpha-memory hash table)
##       Action           <= action
##       Condition        <= condition
##       Diagnostic       <= (Added for debugging)
##       PosCondition     <= (positive) condition
##       Production       <= production
##       Token            <= token
##       WME              <= WME
##       WME_Key          <= WME.fields
##       WM_Hash          <= (unnamed list of WME objects)
##
##   Method name reference:
##     Rete object:
##       activateAME      <= alpha-memory-activation
##       insertBeta       <= build-or-share-beta-memory-node
##       insertCond       <= build-or-share-alpha-memory
##       insertJoin       <= build-or-share-join-node (w/ Added initialize)
##       insertMesh       <= build-or-share-network-for-conditions
##       insertProd       <= add-production
##       insertWME        <= add-wme {exhausitve hash table version}
##       removeWME        <= remove-wme
##
##     Condition object:
##       getJoinTests     <= get-join-tests-from-condition
##
##     Node object:
##       initialize       <= update-new-node-with-matches-from-above
##       nearestParent    <= find-nearest-ancestor-with-same-amem
##
##     BM_Node object:
##       activateLHS      <= beta-memory-left-activation
##       initialize       <= update-new-node-with-matches-from-above
##       insertJoin       <= build-or-share-join-node
##
##     JoinNode object:
##       activateLHS      <= join-node-left-activation
##       activateRHS      <= join-node-right-activation
##       initialize       <= update-new-node-with-matches-from-above
##       joinTest         <= perform-join-tests (Test list)
##       relinkLHS        <= relink-to-beta-memory
##       relinkRHS        <= relink-to-alpha-memory
##
##     JoinTest object:
##       joinTest         <= perform-join-tests (Single test)
##
##     Token object;
##       Token            <= make-token
##       delete           <= delete-token-and-desendents
##       deleteChildren   <= delete-descentents-of-token
##
##############################################################################

##############################################################################
Overview:
Rete and Rete/UL are Inference Engine processors. This directory contains
a reference implementation of Rete/UL (UnLink), derived from
"Production Matching for Large Learning Systems", Robert C. Doorenbos,
January 31, 1995, CMU-CS-95-113.
http://reports-archive.adm.cs.cmu.edu/anon/1995/CMS-CS-95-113.pdf
Source code page references refer to that document.

##############################################################################
Page 10 expected result:
C1: (<x> ^ON <y>)
C2: (<y> ^LEFT-OF <z>)
C3: (<z> ^COLOR RED)

P1: (C1^C2^C3)
==> (W1^W5^W9)
W1: (B1 ^ON B2)
W5: (B2 ^LEFT-OF B3)
W9: (B3 ^COLOR RED)

##############################################################################
OPEN:
2013/07/28 Rete.insertJoin is missing a call to initialize in thesis.
    Without this in place (somewhere,)  BM_Node.initialize is never invoked.
    In the thesis, update-new-node-with-matches-from-above is never called
    for a beta-memory node.

    This seems to have no effect, so the call remains omitted. This is
    controlled by Bringup.correct_insertJoin. (Currently false)

##############################################################################
FEATURE:
2013/01/01 Work begins

##############################################################################
CLOSED:
2013/01/01 Work begins

##############################################################################
FIXED:
2013/08/03 Rete.insertMesh now adds conditions to the HEAD of the earlier
    conditions list. Page 164 of the thesis says to append conditions to the
    earlier condition list.

2013/08/04 BM_Node.activateLHS begins a new token tree if called without a WME
    or if the calling token does not contain a WME. This is done so that dummy
    tokens do not appear in the tree passed to Action objects.

##############################################################################
Quick object reference

AM_Node : Node:
Vector<AME>            items;       // List of AME's
Vector<JoinNode>       successors;  // List of successor JoinNodes
int                    reference_count;  // Reference counter

AME:
AM_Node                amem;        // Associated Alpha Memory
WME                    wme;         // Associated Working Memory Element

BM_Node : Node:
Vector<Token>          items;       // List of Tokens
Vector<JoinNode>       all_children; // List of ALL child nodes

JoinNode:
boolean                linkedLHS;   // TRUE iff left  linked (to Beta Memory)
boolean                linkedRHS;   // TRUE iff right linked (to Alpha Memory)
AM_Node                amem;        // Associated AM_Node
Vector<JoinTest>       tests;       // List of tests
JoinNode               nearest_ancestor_with_same_amem; // Nearest ancestor with same AM_Node

JoinTest:
int                    f1;          // Argument[1] field
int                    c2;          // Argument[2] (Relative) Condition number
int                    f2;          // Argument[2] field

Node:
boolean                isLinked;    // TRUE iff linked to parent
Node                   parent;      // Parent Node
Vector<Node>           children;    // (Active) Child Nodes

Token:                              // A.K.A. BME (Beta Memory Element)
WME                    wme;         // Associated Working Memory Element
BM_Node                node;        // Associated BM_Node
Vector                 join_results; // List of negative join results
Vector<Token>          ncc_results;  // Like join_results, but for NCC nodes
Token                  owner;       // Owner Token

WME:
WME_Key                fields;      // Identifier, attribute, value
Vector<AME>            alpha_mem_items; // List of AME's containing this
Vector<Token>          tokens;      // List of tokens containing this

##############################################################################
Example: Page 10

W1: (B1 ^ON B2)
W2: (B1 ^ON B3)
W3: (B1 ^COLOR RED)
W4: (B2 ^ON TABLE)
W5: (B2 ^LEFT-OF B3)
W6: (B2 ^COLOR BLUE)
W7: (B3 ^LEFT-OF B4)
W8: (B3 ^ON TABLE)
W9: (B3 ^COLOR RED)

C0: <* * *>
C1: (<x> ^ON <y>)
C2: (<y> ^LEFT-OF <z>)
C3: (<z> ^COLOR RED)
C4: (*UNSPECIFIED*)
C5: (*UNSPECIFIED*)

P1: (C1^C2^C3)
==> (W1^W5^W9)

P2: (C1^C2^C4^C5)
P3: (C1^C2^C4^C3)

Working Memory Elements:
W1: KEY: (B1 ^ON B2)
    AME: A1/W1

W2: KEY: (B1 ^ON B3)
    AME: A1/W2

W3: KEY: (B1 ^COLOR RED)
    AME: A3/W3

W4: KEY: (B2 ^ON TABLE)
    AME: A1/W4

W5: KEY: (B2 ^LEFT-OF B3)
    AME: A2/W5

W6: KEY: (B2 ^COLOR BLUE)
    AME: A3/W6

W7: KEY: (B3 ^LEFT-OF B4)
    AME: A2/W7

W8: KEY: (B3 ^ON TABLE)
    AME: A1/W8

W9: KEY: (B3 ^COLOR RED)
    AME: A3/W9

Alpha Memory Nodes:
A1: AM for C1                     Hash<* ^ON *>
    AME: A1/W1, A1/W2, A1/W4, A1/W8

A2: AM for C2                     Hash<* ^LEFT-OF *>
    AME: A2/W5, A2/W7

A3: AM for C3                     Hash<* ^COLOR RED>
    AME: A3/W3, A3/W9

Beta Memory Nodes:
B[000]: TOK: T[000]
        ALL: <nil>

Tokens:
T[000]: W1, B[000], Children: <nil>



J0: JOIN[DUMMY,C0] (W1 .. W9)
J1: JOIN[DUMMY,C1] (W1,W2,W4,W8)  Matches for C1
J2: JOIN[J1,C2] (W1^W5,W2^W7)     Matches for C1^C2
J3: JOIN[J2,C3] (W1^W5^W9)        Matches for C1^C2^C3

P1: JOIN[J3,DUMMY]                Matches for C1^C2^C3

