#!/bin/bash
##############################################################################
##
##       Copyright (C) 2019-2020 Frank Eskesen.
##
##       This file is free content, distributed under the MIT license.
##       (See accompanying file LICENSE.MIT or the original contained
##       within https://opensource.org/licenses/MIT)
##
##############################################################################
##
## Title-
##       ~/src/obj/.README
##
## Purpose-
##       Backup/restore associated repository
##
## Last change date-
##       2020/01/21
##
## Usage-
##       .README {backup | restore}
##
## Implementation note-
##       This subdirectory can be used in-place by renaming git to .git,
##       then using "git reset --hard HEAD" to expand it.
##
##       (You might also want to modify ./.gitignore to reflect these changes.)
##
##############################################################################
REPO=$HOME/obj

##############################################################################
# Function: USAGE
function usage
{
  echo ""
  echo "$0: Backup/restore git repository separately from distribution"
  echo ""
  echo "Usage: $0 <option>"
  echo "Options:"
  echo "backup  (Replaces ./git with $REPO/.git)"
  echo "restore (Replaces $REPO/.git with ./git)"
  echo "         then invokes \"git reset --hard HEAD\" to update it)"
}

##############################################################################
## Verify that the repository exists
if [[ ! -d "$REPO/.git" ]] ; then
  echo "\"$REPO/.git\" does not exist, therefore"
  echo "REPO \"$REPO\" is not a repository."
  echo "This script has been incorrectly configured"
  exit 1
fi

##############################################################################
## Backup/Restore .git repository
if [[ "$*" == "backup" ]] ; then
    set -x
    rm -Rf ./git
    cp -idpRf $REPO/.git git

elif [[ "$*" == "restore" ]] ; then
    echo "This will update $REPO"
    read -p "Are you really sure you want to do this? N/y " text
    if [[ "$text" != "y" && "$text" != "Y" ]] ; then
        echo "Cancelled"
        exit 1
    fi

    set -x
    rm -Rf $REPO/.git
    cp -idpRf git $REPO/.git
    cd $REPO
    git reset --hard HEAD
    set +x

elif [[ "$*" == "" ]] ; then
    echo "Missing command"
    usage
    exit 1

else
    echo "Invalid command: \"$*\""
    usage
    exit 1
fi

